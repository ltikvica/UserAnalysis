from UserAnalysis.WZProduction.patTuple_common_cfg import *
from UserAnalysis.WZProduction.patTuple_el_cfg import *
from UserAnalysis.WZProduction.patTuple_mu_cfg import *
from UserAnalysis.WZProduction.patTuple_jet_cfg import *
from UserAnalysis.WZProduction.patTuple_met_cfg import *


def addFastJet(process):
    process.load('RecoJets.JetProducers.kt4PFJets_cfi')
    process.kt6PFJets = process.kt4PFJets.clone(rParam=0.6, doRhoFastjet=True)
    process.kt6PFJets.Rho_EtaMax = cms.double(2.5)
#    process.patDefaultSequence.replace(process.patJetCorrFactors,
#                                       process.kt6PFJets *
#                                       process.patJetCorrFactors)
    
def jetlep_config(process, reportEveryNum=100, maxEvents=-1) :
    process.load("UserAnalysis.WZProduction.patTuple_jet_cfg")
    common_config(process, reportEveryNum, maxEvents)
    jet_config(process)
    el_config(process)
    mu_config(process)
    met_config(process)
    addFastJet(process)

    # redefine selectedPatMuons (isGlobalMuon not included in std definition)
    process.selectedPatMuons.cut = "pt > 20. & abs(eta) < 2.4 & isGlobalMuon"
    
    # keep all events with 2 leptons above 20 GeV
    process.countPatLeptons.electronSource = "selectedPatElectrons"
    process.countPatLeptons.muonSource     = "selectedPatMuons"
    process.countPatLeptons.minNumber = 2
    
    process.countPatJets.minNumber = 1
    process.countPatJets.src = "selectedPatJets"

    process.newAK7PF = cms.EDProducer("FastjetJetProducer",
                                      Active_Area_Repeats = cms.int32(1),
                                      doAreaFastjet = cms.bool(True),
                                      voronoiRfact = cms.double(-0.9),
                                      maxBadHcalCells = cms.uint32(9999999),
                                      doAreaDiskApprox = cms.bool(False),
                                      maxRecoveredEcalCells = cms.uint32(9999999),
                                      jetType = cms.string('PFJet'),
                                      minSeed = cms.uint32(14327),
                                      Ghost_EtaMax = cms.double(5.0),
                                      doRhoFastjet = cms.bool(False),
                                      jetAlgorithm = cms.string('AntiKt'),
                                      nSigmaPU = cms.double(1.0),
                                      GhostArea = cms.double(0.01),
                                      Rho_EtaMax = cms.double(4.4),
                                      maxBadEcalCells = cms.uint32(9999999),
                                      useDeterministicSeed = cms.bool(True),
                                      doPVCorrection = cms.bool(False),
                                      maxRecoveredHcalCells = cms.uint32(9999999),
                                      rParam = cms.double(0.7),
                                      maxProblematicHcalCells = cms.uint32(9999999),
                                      doOutputJets = cms.bool(True),
                                      src = cms.InputTag("pfNoPileUpIso"),
                                      inputEtMin = cms.double(0.0),
                                      srcPVs = cms.InputTag(""),
                                      jetPtMin = cms.double(3.0),
                                      radiusPU = cms.double(0.5),
                                      maxProblematicEcalCells = cms.uint32(9999999),
                                      doPUOffsetCorr = cms.bool(False),
                                      inputEMin = cms.double(0.0)
                                      )
    
    ## let it run
    process.p = cms.Path(
        process.patMuons *
        process.selectedPatMuons *
        process.patElectrons *
        process.selectedPatElectrons *
        process.countPatLeptons +
        process.goodOfflinePrimaryVertices*
        getattr(process,"PF2PATmod")* 
        #process.PF2PATmod *
        ((process.kt6PFJets*
         process.patJetCorrFactors) +
         process.patJets +
         process.selectedPatJets +
         process.countPatJets
         )*
        process.patTrigger *
        process.patTriggerEvent *
        process.patMETsPF
        )
    
    process.out.SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('p')
        )

    #Keep NVtxs
    process.out.outputCommands.append('keep *_offlinePrimaryVertices_*_*')
    

    process.patJetCorrFactors.rho = cms.InputTag("kt6PFJetsPFlow", "rho")
    process.out.outputCommands.append('keep *_kt6PFJets_rho_PAT')
    

